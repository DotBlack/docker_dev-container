# use the alpine linux image as base
# https://hub.docker.com/_/alpine
FROM golang:1.24-alpine AS dev
# alpine package already ships go

# Watch here for packages: https://pkgs.alpinelinux.org/packages
# apk = alpine package manager
# add = add package from git
# --no-cache = don't keep a copy on the system to prevent downloading in future
## run apk update
RUN apk update
## install musl-dev on alpine linux
RUN apk add musl-dev

# organize code in the iamge inside the working-directory app
WORKDIR /app

# install latest "air" version
# USAGE: automated build and reload of the app in developement
# https://github.com/air-verse/air?tab=readme-ov-file#installation-and-usage-for-docker-users-who-dont-want-to-use-air-image
RUN go install github.com/air-verse/air@latest
# install latest "gopls" version (go please)
# USAGE: offical Go language server - provides IDE-like features for Go development environments
# https://pkg.go.dev/golang.org/x/tools/gopls#section-readme
RUN go install golang.org/x/tools/gopls@latest
# install latest "templ" version
# USAGE: HTML serverside rendering
# https://templ.guide/quick-start/installation/
RUN go install github.com/a-h/templ/cmd/templ@latest
# install latest "delve" version
# USAGE: GO debugging tool
# https://github.com/go-delve/delve/tree/master/Documentation/installation
RUN go install github.com/go-delve/delve/cmd/dlv@latest

# copy sourcecode into the working directory
# this step is not necessary for the dev stage but
# it needs to be done so that the prd stage can pick the 
# executeable out of the dev stages image
COPY . .

# The following instruction makes the air tool run, when the container starts
# https://github.com/air-verse/air?tab=readme-ov-file#installation-and-usage-for-docker-users-who-dont-want-to-use-air-image
# CMD = Docker instruction itself, indicating the default command to execute
# [ ] = brackets where the "executeable" formulation is placed
# air = The executeable to run (for hotreload on filechanges - auto rebuild and restart)
# -c = commandline-flag that is usually used to pass "config" or "configuration files"
# .air.toml = path to the configuration file
CMD [ "air", "-c", ".air.toml" ]


########## PRD IMAGE ##########

# use the alpine linux image as base
# https://hub.docker.com/_/postgres
FROM golang:1.24-alpine AS prd
# copy the executeable from the devstage into the production stage
COPY --from=dev /app/main .
# set the main application as the entrypoint
ENTRYPOINT [ "./main" ]